from flask import Flask, request, jsonify
from flask_cors import CORS
import pandas as pd
import json
import urllib
app = Flask(__name__)
CORS(app, resources={r"/*": {"origins": "*"}})

# ===== 1. Load association rules (from FP-Growth) =====
with open("rules.json", "r", encoding="utf-8") as f:
    rule_data = json.load(f)
rules = pd.DataFrame(rule_data)

# ===== 2. Load Data  =====
products_df = pd.read_csv("data/Extracted_Product_Categories.csv")

# ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° image_url ‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö products_df
products_df["image_url"] = products_df["‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤"].apply(
    lambda name: f"http://127.0.0.1:5000/static/images/{urllib.parse.quote(name)}.jpg"
)
# ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏à‡∏≤‡∏Å Excel
sales_df1 = pd.read_excel("data/month1.xlsx", sheet_name="‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô")[["‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤", "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà" , "‡∏£‡∏´‡∏±‡∏™‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤", "‡∏´‡∏ô‡πà‡∏ß‡∏¢"]]
sales_df2 = pd.read_excel("data/month2.xlsx", sheet_name="‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô")[["‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤", "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà", "‡∏£‡∏´‡∏±‡∏™‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤", "‡∏´‡∏ô‡πà‡∏ß‡∏¢"]]
sales_df3 = pd.read_excel("data/month3.xlsx", sheet_name="‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô")[["‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤", "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà", "‡∏£‡∏´‡∏±‡∏™‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤", "‡∏´‡∏ô‡πà‡∏ß‡∏¢"]]

# ‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢
sales_df = pd.concat([sales_df1, sales_df2, sales_df3], ignore_index=True)
full_sales_df = pd.concat([sales_df1, sales_df2, sales_df3], ignore_index=True)

# ‚úÖ ‡∏£‡∏ß‡∏°‡∏Å‡∏±‡∏ö products_df ‡∏ó‡∏µ‡πà‡∏°‡∏µ image_url ‡πÅ‡∏•‡πâ‡∏ß
sales_df = sales_df.merge(products_df, on="‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤", how="left")
# ‡∏Å‡∏£‡∏≠‡∏á‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å‡∏≠‡∏≠‡∏Å
# üî• ‡∏•‡∏ö‡∏Ñ‡∏≥‡∏ß‡πà‡∏≤ "‡∫¢‡∫≤‡∫™‡∫≤‡∫°‡∫±‡∫ô‡∫õ‡∫∞‡∫à‡∫≥‡∫ö‡ªâ‡∫≤‡∫ô" ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà
sales_df["‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà"] = sales_df["‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà"].str.replace("‡∫¢‡∫≤‡∫™‡∫≤‡∫°‡∫±‡∫ô‡∫õ‡∫∞‡∫à‡∫≥‡∫ö‡ªâ‡∫≤‡∫ô", "", regex=False).str.strip()

# ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï categories ‡πÉ‡∏´‡∏°‡πà
categories = sorted(sales_df["‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà"].dropna().unique())

# ===== API 1: Recommend product from association rules =====
@app.route('/api/recommend', methods=['POST'])
def recommend():
    input_items = request.json.get('items', [])
    if not input_items:
        return jsonify({'recommendations': []})

    recommendations = set()
    for _, rule in rules.iterrows():
        if set(rule['antecedents']).issubset(input_items):
            recommendations.update(rule['consequents'])

    recommendations -= set(input_items)
    return jsonify({'recommendations': list(recommendations)})

# ===== API 2: Recommend best-selling products in categories =====
@app.route('/api/recommend-products', methods=['POST'])
def recommend_by_category():
    category = request.json.get("category", None)
    if not category:
        return jsonify({"products": []})

    top_products = (
        sales_df[sales_df["‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà"] == category]
        .groupby("‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤")
        .size()
        .sort_values(ascending=False)
        .head(10)
        .index.tolist()
    )

    return jsonify({"products": top_products})

# ===== API 3: Product pairs that are often bought together =====
@app.route('/api/top-pairs', methods=['GET'])
def top_pairs():
    pair_rules = rules[
        (rules['antecedents'].apply(len) == 1) &
        (rules['consequents'].apply(len) == 1)
    ].copy()

    pair_rules["pair"] = pair_rules.apply(
        lambda row: f"{list(row['antecedents'])[0]} ‚Üî {list(row['consequents'])[0]}", axis=1
    )

    pair_rules = pair_rules.sort_values(by="support", ascending=False).head(10)

    return jsonify(pair_rules[["pair", "support", "confidence", "lift"]].to_dict(orient="records"))

# ===== API 4: all categories =====
@app.route('/api/categories', methods=['GET'])
def get_categories():
    categories = sales_df["‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà"].dropna().unique().tolist()
    # ‡∏Å‡∏£‡∏≠‡∏á‡∏≠‡∏≠‡∏Å
    exclude = ["-", "‡∫¢‡∫≤‡∫™‡∫≤‡∫°‡∫±‡∫ô‡∫õ‡∫∞‡∫à‡ªç‡∫≤‡∫ö‡ªâ‡∫≤‡∫ô","‡∫Ç‡∫≠‡∫á‡∫´‡∫ß‡∫≤‡∫ô"]
    filtered_categories = [c for c in categories if c not in exclude]

    return jsonify({"categories": filtered_categories})

# ===== API 5: Recommend products frequently bought together =====
@app.route('/api/pair-recommend', methods=['POST'])
def pair_recommend():
    input_items = set(request.json.get('items', []))
    pair_recommendations = set()

    for _, rule in rules.iterrows():
        antecedent = set(rule["antecedents"])
        consequent = set(rule["consequents"])
        if input_items & antecedent:
            pair_recommendations |= consequent

    pair_recommendations -= input_items
    return jsonify({'pair_recommendations': list(pair_recommendations)})

# ===== API 6: rules all (debug use view only) =====
@app.route('/api/rules', methods=['GET'])
def get_rules():
    def convert_set(value):
        if isinstance(value, frozenset):
            return list(value)
        return value

    cleaned_rules = []
    for _, row in rules.iterrows():
        cleaned_rules.append({
            "antecedents": convert_set(row["antecedents"]),
            "consequents": convert_set(row["consequents"]),
            "support": row["support"],
            "confidence": row["confidence"],
            "lift": row["lift"],
        })

    return jsonify(cleaned_rules)
@app.route('/api/products', methods=['GET'])
def get_all_products():
    products_df = pd.read_csv("data/Extracted_Product_Categories.csv")
    products_df = products_df.dropna(subset=['‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤', '‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà'])

    sales_df1 = pd.read_excel("data/month1.xlsx", sheet_name="‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô")[["‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤", "‡∏£‡∏´‡∏±‡∏™‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤"]]
    sales_df2 = pd.read_excel("data/month2.xlsx", sheet_name="‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô")[["‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤", "‡∏£‡∏´‡∏±‡∏™‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤"]]
    sales_df3 = pd.read_excel("data/month3.xlsx", sheet_name="‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô")[["‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤", "‡∏£‡∏´‡∏±‡∏™‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤"]]

    sales_df = pd.concat([sales_df1, sales_df2, sales_df3], ignore_index=True)

    merged_df = sales_df.merge(products_df, on='‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤', how='left')

    merged_df = merged_df[['‡∏£‡∏´‡∏±‡∏™‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤', '‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤', '‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà']].drop_duplicates()

    merged_df = merged_df.rename(columns={
        '‡∏£‡∏´‡∏±‡∏™‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤': 'id',
        '‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤': 'name',
        '‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà': 'type'
    })

    # ‡∏Å‡∏£‡∏≠‡∏á row ‡∏ó‡∏µ‡πà id ‡πÄ‡∏õ‡πá‡∏ô NaN ‡∏≠‡∏≠‡∏Å
    merged_df = merged_df[merged_df['id'].notna()]

    # ‡∏ñ‡πâ‡∏≤ id ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏•‡∏Ç ‡πÉ‡∏´‡πâ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô string ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ frontend ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢
    merged_df['id'] = merged_df['id'].astype(str)

    merged_df['image'] = merged_df['name'].apply(
        lambda name: f"/images/{urllib.parse.quote(str(name))}.jpg" if pd.notna(name) else None
    )

    return jsonify(merged_df.to_dict(orient='records'))

@app.route('/api/products/<product_id>', methods=['GET'])
def get_product_detail(product_id):
    if not product_id or product_id.strip().lower() == 'nan':
        return jsonify({'error': 'Invalid product ID'}), 400

    # ‡∏´‡∏≤‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    product_sales = full_sales_df[full_sales_df['‡∏£‡∏´‡∏±‡∏™‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤'].astype(str) == str(product_id)]

    if product_sales.empty:
        return jsonify({'error': 'Product not found'}), 404

    # ‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
    product_name = product_sales['‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤'].iloc[0]
    unit = product_sales['‡∏´‡∏ô‡πà‡∏ß‡∏¢'].iloc[0]

    # product info ‡∏à‡∏≤‡∏Å‡∏ä‡∏∑‡πà‡∏≠
    product_info = products_df[products_df['‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤'] == product_name]

    # ‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô
    daily_sales = product_sales.groupby('‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà').size().reset_index(name='times_sold')

    detail = {
        'id': product_id,
        'name': product_name,
        'unit': unit,
        'category': product_info['‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà'].iloc[0] if not product_info.empty else None,
        'image_url': product_info['image_url'].iloc[0] if not product_info.empty else None,
        'total_sold': len(product_sales),
        'first_sold_date': str(product_sales['‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà'].min()),
        'last_sold_date': str(product_sales['‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà'].max()),
        'times_sold_per_day': daily_sales.to_dict(orient='records')
    }

    return jsonify(detail)

@app.route('/api/products/popular', methods=['GET'])
def get_popular_products():
    top_products = (
        sales_df
        .groupby("‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤")
        .size()
        .sort_values(ascending=False)
        .head(10)
        .index.tolist()
    )
    return jsonify({"popular": top_products})

# ===== API 9: Get product by Name =====
@app.route('/api/products/name/<product_name>', methods=['GET'])
def get_product_by_name(product_name):
    full_sales = pd.concat([sales_df1, sales_df2, sales_df3], ignore_index=True)

    # ‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
    product_data = full_sales[full_sales['‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤'] == product_name]

    if product_data.empty:
        return jsonify({'error': 'Product not found'}), 404

    # ‡∏ô‡∏±‡∏ö‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏ï‡πà‡∏≠‡∏ß‡∏±‡∏ô
    daily_sales = product_data.groupby('‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà').size().reset_index(name='times_sold')
    daily_sales = daily_sales.sort_values(by='‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà')

    detail = {
        'name': product_name,
        'total_sold': len(product_data),
        'daily_sales': daily_sales.to_dict(orient='records'),
        'first_sold_date': str(product_data['‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà'].min()),
        'last_sold_date': str(product_data['‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà'].max())
    }

    return jsonify(detail)

if __name__ == '__main__':
    app.run(debug=True,port=5050)
